package com.Ex.api;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.Ex.model.Person;
import com.Ex.service.PersonService;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/person") // This means URL's start with /person (after Application path)
public class MainController {

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private PersonService personService;

	@GetMapping(path = "/")
	public @ResponseBody Iterable<Person> getAllPersons() {
		// This returns a JSON or XML with the Persons
		// personService.findAll().forEach(p -> System.out.println(p.getId()));
		return personService.findAll();
	}

	@PostMapping(path = "/") // Map ONLY POST Requests
	public @ResponseBody String addNewPerson(@RequestBody Person person) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		personService.save(person);
		return "Saved";
	}

	@PostMapping(path = "/list", consumes = { MediaType.APPLICATION_FORM_URLENCODED_VALUE }) // Map ONLY POST Requests
	public @ResponseBody String addListPerson(@RequestParam MultiValueMap request) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Person person = new Person(request.getFirst("name").toString(), request.getFirst("age").toString());
		System.out.println(request.getFirst("name").toString());
		personService.save(person);
		return "Saved";
	}

	@PutMapping(path = "/{id}") // Map ONLY POST Requests
	public @ResponseBody String updateNewPerson(@PathVariable("id") int id, @RequestBody Person p) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Person person = personService.findById(id);
		person.setAge(p.getAge());
		person.setName(p.getName());
		personService.save(person);
		return "Updated";
	}

	@DeleteMapping(path = "/{id}")
	public @ResponseBody String deletePerson(@PathVariable("id") int id) {
		// This returns a JSON or XML with the Persons
		personService.deleteById(id);
		return "Deleted";
	}
}
